{"version":3,"sources":["images/logo.png","serviceWorker.js","pages/components/home-layout.js","playlist/components/media.js","playlist/components/playlist.js","categories/components/catetory.js","categories/components/categories.js","pages/components/related.js","widgets/container/modal.js","widgets/components/modal.js","pages/containers/home.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","HomeLayout","props","react_default","a","createElement","className","children","Media","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleClick","e","alert","onClick","src","image","alt","width","height","title","author","PureComponent","Playlist","playlist","map","element","index","components_media","handleOpenModal","key","cover","Category","decription","components_playlist","Categories","categories","item","catetory","assign","id","Related","logo","ModalContainer","createPortal","document","getElementById","Component","Modal","Home","modalVisible","event","setState","handleCloseModal","components_home_layout","components_related","components_categories","data","modal","widgets_components_modal","homeContainer","ReactDOM","render","home","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,o1ECYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCPSC,MARf,SAAoBC,GAChB,OACIC,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACdJ,EAAMK,WC4DJC,qBA5DX,SAAAA,EAAYN,GAAM,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KAeVc,MAAQ,GAhBUP,EAqBlBQ,YAAc,SAACC,GAKfC,MAAM,UA1BYV,wEA2Cd,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQc,QAASR,KAAKV,MAAMe,aACvCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXe,IAAKT,KAAKV,MAAMoB,MAChBC,IAAI,GACJC,MAAO,IACPC,OAAQ,MAEZtB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeM,KAAKV,MAAMwB,OACxCvB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBM,KAAKV,MAAMyB,iBAvDxCC,8BCwBLC,MApBf,SAAkB3B,GAEd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACdJ,EAAM4B,SAASC,IAAI,SAACC,EAASC,GAC1B,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,CACKjB,YAAef,EAAMiC,gBACrBC,IAAKH,EACLP,MAAOM,EAAQN,MACfC,OAASK,EAAQL,OACjBL,MAAQU,EAAQK,kBCDzBC,MAbf,SAAkBpC,GACd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBJ,EAAMwB,OACtCvB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAAyBJ,EAAMqC,YAC5CpC,EAAAC,EAAAC,cAACmC,EAAD,CACIL,gBAAmBjC,EAAMiC,gBACzBL,SAAU5B,EAAM4B,mBCWjBW,MAlBf,SAAoBvC,GAChB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEPJ,EAAMwC,WAAWX,IAAI,SAACY,GAClB,OACIxC,EAAAC,EAAAC,cAACuC,EAADlC,OAAAmC,OAAA,CACIV,gBAAmBjC,EAAMiC,gBACzBC,IAAKO,EAAKG,IACNH,8BCFjBI,MARf,SAAiB7C,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKgB,IAAK2B,IAAMxB,MAAO,QCOpByB,mLARP,OAAOC,uBACHtC,KAAKV,MAAMK,SACX4C,SAASC,eAAe,2BAJPC,mBCadC,MAbf,SAAepD,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,mBAEKJ,EAAMK,SAIPJ,EAAAC,EAAAC,cAAA,UAAQe,QAASlB,EAAMe,aAAvB,YCyCGsC,6MA3CXvC,MAAQ,CACJwC,cAAa,KAIjBrB,gBAAkB,SAACsB,GACfhD,EAAKiD,SAAS,CACVF,cAAa,OAKrBG,iBAAmB,SAACF,GAChBhD,EAAKiD,SAAS,CACVF,cAAc,6EAIlB,OACIrD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACuD,EAAD,KACIzD,EAAAC,EAAAC,cAACwD,EAAD,MACA1D,EAAAC,EAAAC,cAACyD,EAAD,CACI3B,gBAAmBvB,KAAKuB,gBACxBO,WAAY9B,KAAKV,MAAM6D,KAAKrB,aAI5B9B,KAAKI,MAAMwC,cACXrD,EAAAC,EAAAC,cAAC2D,EAAD,KACI7D,EAAAC,EAAAC,cAAC4D,EAAD,CACIhD,YAAcL,KAAK+C,kBAEnBxD,EAAAC,EAAAC,cAAA,0CAnCbgD,oBCQba,EAAgBf,SAASC,eAAe,kBAE9Ce,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,CAAMN,KAAQA,IAASG,GVgHjC,kBAAmBI,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ab28e4d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d1175efd.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './home-layout.css'\n\nfunction HomeLayout(props){\n    return(\n        <section className=\"HomeLayout\">\n            {props.children}\n        </section>\n    )\n}\n\nexport default HomeLayout;","import React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport './media.css'\n\nclass Media extends PureComponent{\n\n    constructor(props){\n        super(props)       \n        /*\n            this.state = {\n                author: props.author,\n            }\n            this.handleClick = this.handleClick.bind(this) \n        */\n    }\n\n    static propTypes = {\n        image: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        type: PropTypes.oneOf(['video', 'audio'])\n    }\n\n    state = {\n\n    }\n\n\n    handleClick = (e)=>{\n    // Using Arrow function, we don't need bind the context\n    // ES7 Arrow function always inherit the parent context\n    //console.log(this) // Media \n    //console.log(this.props.image)\n    alert(\"Click\")\n\n    }\n\n    render(){\n        /*\n        const styles = {\n            container: {\n                fontSize: '14px',\n                backgroundColor: 'white',\n                color:'#44546b',\n                cursor: 'pointer',\n                width: '260px',\n                border: '1px solid red'\n            }\n        }\n        */\n        return(\n            <div className=\"Media\" onClick={this.props.handleClick}> \n                <div className=\"Media-cover\">\n                    <img className=\"Media-image\"\n                        src={this.props.image}\n                        alt=\"\"\n                        width={260}\n                        height={160}\n                    />\n                    <h3 className=\"Media-title\">{this.props.title}</h3>\n                    <p className=\"Media-author\">{this.props.author}</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Media;","import React, {Component} from 'react';\nimport Media from './media';\nimport  './playlist.css';\nimport Play from '../../icons/components/Play'\nimport Volume from '../../icons/components/Volume'\nimport Pause from '../../icons/components/Pause'\nimport FullScreen from '../../icons/components/FullScreen'\n\nfunction Playlist(props){\n\n    return(\n        <div className=\"Playlist\">\n        {props.playlist.map((element, index)=>{\n            return <Media \n                        handleClick = {props.handleOpenModal}\n                        key={index}\n                        title={element.title}\n                        author= {element.author}\n                        image= {element.cover}\n\n                        //CHange for spread operator\n                    />\n        })}\n        \n    </div>\n    )\n}\n\nexport default Playlist;","import React from  'react';\nimport Playlist from '../../playlist/components/playlist'\nimport './category.css'\n\nfunction Category(props){\n    return(\n        <div className=\"Category\">\n            <h2 className=\"Category-title\">{props.title}</h2>\n            <p className=\"Cagtegory-description\">{props.decription}</p>\n            <Playlist\n                handleOpenModal = {props.handleOpenModal}\n                playlist={props.playlist}\n            />\n        </div>\n    )\n}\n\nexport default Category;","import React from 'react';\nimport Category from './catetory'\nimport './categories.css'\n\nfunction Categories(props){\n    return(\n        <div className=\"Categories\">\n            {\n                props.categories.map((item)=>{\n                    return(\n                        <Category\n                            handleOpenModal = {props.handleOpenModal}\n                            key={item.id}\n                            {...item}\n                        />\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default Categories;","import React from 'react';\nimport logo from '../../images/logo.png'\nimport './related.css'\nfunction Related(props){\n    return(\n        <div className=\"Related\">\n            <img src={logo} width={150}/>\n        </div>\n    )\n}\n\nexport default Related;","import React, {Component} from 'react';\nimport {createPortal} from 'react-dom';\n\nclass ModalContainer extends Component{\n    render(){\n        return createPortal(\n            this.props.children,\n            document.getElementById('modal-container')\n        )\n    }\n}\n\n\nexport default ModalContainer;","import React from 'react';\nimport './modal.css';\n\nfunction Modal(props){\n    return(\n        <div className=\"Modal\">\n            Esto es un modal\n            {props.children}\n            {\n            // Los componentes funcionales no deben manejar sus eventos, deben recibirlos por medio de props\n            }\n            <button onClick={props.handleClick}>Cerrar</button>\n        </div>\n    )\n}\n\nexport default Modal;\n","import React, {Component} from 'react';\nimport HomeLayout from '../components/home-layout';\nimport Categories from '../../categories/components/categories';\nimport Related from '../components/related';\nimport ModalCotainer from '../../widgets/container/modal'\nimport Modal from '../../widgets/components/modal'\n\nclass Home extends Component{\n\n    state = {\n        modalVisible:false,\n    }\n\n    // This handle has to be passed to media component\n    handleOpenModal = (event) => {\n        this.setState({\n            modalVisible:true,\n        })\n    }\n\n    // This handle has to be passed to Modal component\n    handleCloseModal = (event) =>{\n        this.setState({\n            modalVisible: false,\n        })\n    }\n    render(){\n        return(\n            <div>\n                <HomeLayout>\n                    <Related/>\n                    <Categories\n                        handleOpenModal = {this.handleOpenModal}\n                        categories={this.props.data.categories}\n                        />\n                    {\n                        // If \n                        this.state.modalVisible &&\n                        <ModalCotainer>\n                            <Modal\n                                handleClick= {this.handleCloseModal}\n                            >\n                                <h1>Esto es un Portal</h1>\n                            </Modal>\n                        </ModalCotainer>\n                    }\n                </HomeLayout>\n            </div>\n        )\n    }\n}\n\nexport default Home;","/* index.js -> Main app file\n** This file \"index.js\" is the main file application\n** this code load dependencies, import the main component, main style file.\n** Then render the main component inside of a html element\n*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './pages/containers/home'\nimport data from './data/api.json'\n\n// Here we should have different entry point for each page Home/-home.js|\n\nconst homeContainer = document.getElementById('home-container');\n\nReactDOM.render(<Home data = {data}/>, homeContainer);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}